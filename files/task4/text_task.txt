Метеоритный дождь

ограничение по времени на тест: 1 с.
ограничение по памяти на тест: 256 MB
ввод: standard input
вывод: standard output

Эдуард снова пора идти на пары в Мизм. Но утром он узнал, что произошёл метеоритный дождь и теперь, возможно, он не сможет добраться до университета. Эдуард живёт в прямоугольном городе. Для удобства город поделен на одинаковые по размеру кварталы. Всего в городе n × m кварталов (то есть город представляется в виде прямоугольной матрицы n × m). Обозначим (r, c) как квартал в r-й строке сверху и c-м столбце слева. Два квартала называются соседними, если они имеют общую сторону.

Луим — это последовательность кварталов, незагораживаемых метеоритами, которая позволяет Эдуарду без помех добраться до пары, начиная с квартала, где он проживает, и заканчивая кварталом, где находится университет. Луим задаётся как последовательность кварталов, где каждый квартал с номером i непосредственно соседствует с кварталом i + 1.

Каждый район изначально не затронут метеоритным дождём. Эдуард живёт в квартале (x1, y1), а Мизм находится в квартале (x2, y2). Вы можете выбрать любое количество районов (кроме (x1, y1) и (x2, y2)) и решить, что туда упал метеорит (делая этот район непроходимым для Эдуарда). Эдуарду интересно, какое минимальное количество метеоритов должно упасть, чтобы он не смог добраться до универа. Найдите это число.

Входные данные

Первая строка содержит одно целое число t (1 ≤ t ≤ 500) — количество наборов входных данных.

Первая строка каждого набора входных данных содержит два целых числа n, m (4 ≤ n, m ≤ 10^9) — размер города.

Вторая строка каждого набора входных данных содержит четыре целых числа x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — координаты квартала, в котором живёт Эдуард, и квартала, в котором находится Мизм, соответственно.

Гарантируется, что |x1 - x2| + |y1 - y2| ≥ 2.

Выходные данные

Для каждого набора входных данных выведите минимальное количество метеоритов, необходимое для того, чтобы не существовало луима из (x1, y1) в (x2, y2).

Пример

входные данные
3
4 4
2 2 3 3
5 5
1 5 5 1
9 9
5 3 9 6

выходные данные
2
3
4

Примечание

В первом наборе входных данных можно поставить препятствия на (1, 3), (3, 3), (2, 4). Тогда путь из (2, 2) в (3, 3) не будет существовать.